name: build-and-bundle
on: 
  pull_request:
  push:
    branches:
      - ros1
  schedule:
    - cron: '0 */2 * * *'  # run every 2 hours

jobs:
  build_and_bundle_ros1:
    strategy:
      matrix:
        distro: ['kinetic', 'melodic']
        gazebo: [7, 9]
        include:
        - distro: kinetic
          gazebo: 7
          ubuntu_distro: xenial
        - distro: kinetic
          gazebo: 9
          ubuntu_distro: xenial
        - distro: melodic
          gazebo: 9
          ubuntu_distro: bionic
        exclude:
        - distro: 'melodic'
          gazebo: 7
    runs-on: ubuntu-latest
    if: github.event_name != 'push' || github.ref != 'refs/heads/ros2'
    name: 'Build and Bundle (ROS1)'
    container:
      image: rostooling/setup-ros-docker:ubuntu-${{ matrix.ubuntu_distro }}-ros-${{ matrix.distro }}-ros-base-latest
    outputs:
      robot_ws_build_result: ${{ steps.robot_ws_build.outcome }}
      simulation_ws_build_result: ${{ steps.simulation_ws_build.outcome }}
      upload_result: ${{ steps.upload.outcome }}
    steps:
    - name: Checkout Branch
      uses: actions/checkout@v1
    - name: Setup Permissions
      run: |
        # TODO(setup-ros-docker#7): calling chown is necessary for now
        sudo chown -R rosbuild:rosbuild "$HOME" .
    - id: robot_ws_build
      name: Build and Bundle Robot Workspace
      uses: mm318/aws-robomaker-sample-application-ci@master
      with:
        ros-distro: ${{ matrix.distro }}
        gazebo-version: ${{ matrix.gazebo }}
        workspace-dir: robot_ws
        generate-sources: true
    - id: simulation_ws_build
      name: Build and Bundle Simulation Workspace
      uses: mm318/aws-robomaker-sample-application-ci@master
      with:
        ros-distro: ${{ matrix.distro }}
        gazebo-version: ${{ matrix.gazebo }}
        workspace-dir: simulation_ws
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ROS1 }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ROS1 }}
        aws-region: us-west-2
      if: always() && github.ref == 'refs/heads/ros1' # always log "push" and "schedule" build status
    - id: upload
      name: Upload to S3
      uses: mm318/s3-cp-action@v0.3.0
      env:
        AWS_S3_BUCKET: ${{ secrets.AWS_S3_BUCKET_ROS1 }}
        AWS_REGION: 'us-west-2'
        FILES: 'sources.zip sources.tar.gz robot_ws.tar simulation_ws.tar'
        DEST: 'travis/cloudwatch/${{ steps.robot_ws_build.outputs.ros-distro }}/${{ steps.robot_ws_build.outputs.gazebo-version }}/${{ steps.robot_ws_build.outputs.sample-app-version }}.${{ github.run_number }}/'
      if: github.event_name == 'schedule' # upload to S3 on "schedule" build

  log_workflow_status_to_cloudwatch:
    runs-on: ubuntu-latest
    container:
      image: ubuntu:bionic
    needs:
    - build_and_bundle_ros1
    if: always()  # run even if the dependent jobs have failed to log failures
    # Allow build reports to fail on pull requests.
    # When a contribution is made on a fork, the secrets will not be available,
    # and this step will be failing. This is acceptable.
    # On the other end, we want to be notified if this happens on merge, or
    # on schedule.
    continue-on-error: ${{ github.event_name == 'pull_request'}}
    steps:
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_ROS1 }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_ROS1 }}
        aws-region: us-west-2
    - name: Log Robot Workspace Build Status
      uses: ros-tooling/action-cloudwatch-metrics@0.0.4
      with:
        namespace: RobotWorkspaceBuild
        metric-value: ${{ ! contains(needs.build_and_bundle_ros1.outputs.robot_ws_build_result, 'failure') }}
    - name: Log Simulation Workspace Build Status
      uses: ros-tooling/action-cloudwatch-metrics@0.0.4
      with:
        namespace: SimulationWorkspaceBuild
        metric-value: ${{ ! contains(needs.build_and_bundle_ros1.outputs.simulation_ws_build_result, 'failure') }}
    - name: Log Upload Status
      uses: ros-tooling/action-cloudwatch-metrics@0.0.4
      with:
        namespace: UploadToS3
        metric-value: ${{ ! contains(needs.build_and_bundle_ros1.outputs.upload_result, 'failure') }}
